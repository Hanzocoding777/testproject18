import re
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, 
    ConversationHandler, MessageHandler, filters, Application
)

from handlers.utils import process_team_roles
from constants import *

logger = logging.getLogger(__name__)

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
(
    ADMIN_TOURNAMENT_MENU,
    ADMIN_CREATE_TOURNAMENT_NAME,
    ADMIN_CREATE_TOURNAMENT_DESCRIPTION,
    ADMIN_CREATE_TOURNAMENT_DATE,
    ADMIN_EDIT_TOURNAMENT,
    ADMIN_EDIT_TOURNAMENT_NAME,
    ADMIN_EDIT_TOURNAMENT_DESCRIPTION,
    ADMIN_EDIT_TOURNAMENT_DATE,
) = range(ADMIN_TEAM_FILTER + 1, ADMIN_TEAM_FILTER + 9)

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    db = context.bot_data["db"]
    user_id = update.effective_user.id
    
    if not db.is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    all_teams = db.get_all_teams()
    pending_count = len([t for t in all_teams if t["status"] == "pending"])
    approved_count = len([t for t in all_teams if t["status"] == "approved"])
    rejected_count = len([t for t in all_teams if t["status"] == "rejected"])
    total_count = len(all_teams)

    keyboard = [
        [InlineKeyboardButton(f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ({total_count})", callback_data="admin_teams_list")],
        [
            InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({approved_count})", callback_data="admin_teams_approved"),
            InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ ({rejected_count})", callback_data="admin_teams_rejected")
        ],
        [InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ ({pending_count})", callback_data="admin_teams_pending")],
        [InlineKeyboardButton("üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏", callback_data="admin_tournaments")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_admins_list")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ADMIN_MENU

async def admin_teams_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    command_parts = query.data.split("_")
    filter_status = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    if len(command_parts) > 3 and command_parts[2] == "team":
        team_id = int(command_parts[3])
        return await show_team_info(update, context, team_id)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if len(command_parts) > 2:
        status_map = {"approved": "approved", "rejected": "rejected", "pending": "pending"}
        filter_status = status_map.get(command_parts[2])
    
    # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç—É—Ä–Ω–∏—Ä–∞–º
    if not filter_status:
        teams = db.get_all_teams()
        
        if not teams:
            back_button = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
            
            await query.edit_message_text(
                "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=back_button
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []
        message = "<b>üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        message += f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(teams)}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
        
        for team in teams:
            status_emoji = "‚è≥" if team["status"] == "pending" else "‚úÖ" if team["status"] == "approved" else "‚ùå"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status_emoji} {team['team_name']}",
                    callback_data=f"admin_teams_team_{team['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    tournaments = db.get_all_tournaments()
    
    if not tournaments:
        back_button = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]])
        
        await query.edit_message_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.",
            reply_markup=back_button
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π emoji –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = "‚è≥" if filter_status == "pending" else "‚úÖ" if filter_status == "approved" else "‚ùå"
    status_text = "–æ–∂–∏–¥–∞—é—â–∏–µ" if filter_status == "pending" else "–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ" if filter_status == "approved" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–∞–Ω–¥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    keyboard = []
    
    for tournament in tournaments:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        tournament_teams = db.get_all_teams(status=filter_status, tournament_id=tournament['id'])
        teams_count = len(tournament_teams)
        
        keyboard.append([
            InlineKeyboardButton(
                f"{tournament['name']} ({teams_count} –∫–æ–º–∞–Ω–¥)",
                callback_data=f"admin_tournament_teams_status_{tournament['id']}_{filter_status}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    all_teams = db.get_all_teams(status=filter_status)
    all_teams_count = len(all_teams)
    
    keyboard.append([
        InlineKeyboardButton(
            f"–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã ({all_teams_count} –∫–æ–º–∞–Ω–¥)",
            callback_data=f"admin_tournament_teams_status_all_{filter_status}"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await query.edit_message_text(
        f"{status_emoji} <b>{status_text.capitalize()} –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
async def admin_tournament_status_teams(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    parts = query.data.split("_")
    tournament_id = parts[4]
    status = parts[5]
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    if tournament_id == "all":
        tournament_id = None
        tournament_name = "–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    else:
        tournament_id = int(tournament_id)
        tournament = db.get_tournament_by_id(tournament_id)
        tournament_name = tournament['name'] if tournament else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    teams = db.get_all_teams(status=status, tournament_id=tournament_id)
    
    if not teams:
        await query.edit_message_text(
            f"–í —Ç—É—Ä–Ω–∏—Ä–µ \"{tournament_name}\" –Ω–µ—Ç {TEAM_STATUS.get(status, '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö')} –∫–æ–º–∞–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_teams_{status}")
            ]])
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π emoji –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = "‚è≥" if status == "pending" else "‚úÖ" if status == "approved" else "‚ùå"
    status_text = "–æ–∂–∏–¥–∞—é—â–∏–µ" if status == "pending" else "–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ" if status == "approved" else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = []
    
    message = f"{status_emoji} <b>{status_text.capitalize()} –∫–æ–º–∞–Ω–¥—ã</b> - {tournament_name}\n\n"
    message += f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(teams)}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    for team in teams:
        keyboard.append([
            InlineKeyboardButton(
                f"{team['team_name']}",
                callback_data=f"admin_teams_team_{team['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_text = f"üìù –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {status_emoji} {status_text} –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–∞–π–ª"
    
    keyboard.append([
        InlineKeyboardButton(
            export_text,
            callback_data=f"admin_export_teams_{status}_{tournament_id if tournament_id else 'all'}"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_teams_{status}")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await query.edit_message_text(
        f"{status_emoji} <b>{status_text.capitalize()} –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def show_team_info(update: Update, context: ContextTypes.DEFAULT_TYPE, team_id: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ."""
    query = update.callback_query
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    teams = db.get_all_teams()
    team = next((t for t in teams if t["id"] == team_id), None)
    
    if not team:
        await query.edit_message_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_teams_list")
            ]])
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã
    keyboard = []
    
    if team["status"] == "pending":
        keyboard.append([
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_team_{team_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_team_{team_id}")
        ])
    elif team["status"] == "approved":
        keyboard.append([
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_team_{team_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_team_{team_id}")
        ])
    elif team["status"] == "rejected":
        keyboard.append([
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_team_{team_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_team_{team_id}")
        ])
    
    keyboard.append([InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_team_{team_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
    if team["status"] == "pending":
        back_data = "admin_teams_pending"
    elif team["status"] == "approved":
        back_data = "admin_teams_approved"
    elif team["status"] == "rejected":
        back_data = "admin_teams_rejected"
    else:
        back_data = "admin_teams_list"
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=back_data)])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    players_list = ""
    captain = None
    
    for player in team["players"]:
        stat_url = f"https://pubg.op.gg/user/{player['nickname']}"
        stat_button = f"<a href='{stat_url}'>üìä</a>"
        discord_info = f" [Discord: {player.get('discord_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}]" if player.get('discord_username') else ""
        
        if player.get("is_captain", False) or (isinstance(player, tuple) and len(player) > 2 and player[2]):
            if isinstance(player, dict):
                captain = f"‚Ä¢ {player['nickname']} ‚Äì @{player['telegram_username']} (–ö–∞–ø–∏—Ç–∞–Ω) {discord_info} {stat_button}"
            else:
                captain = f"‚Ä¢ {player[0]} ‚Äì @{player[1]} (–ö–∞–ø–∏—Ç–∞–Ω) {discord_info} {stat_button}"
        else:
            if isinstance(player, dict):
                player_info = f"‚Ä¢ {player['nickname']} ‚Äì @{player['telegram_username']} {discord_info} {stat_button}"
            else:
                player_info = f"‚Ä¢ {player[0]} ‚Äì @{player[1]} {discord_info} {stat_button}"
            players_list += f"{player_info}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    if captain:
        players_list = f"{captain}\n\n{players_list}"
    
    # –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
    message = (
        f"üéÆ <b>–ö–æ–º–∞–Ω–¥–∞:</b> {team['team_name']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {team['registration_date']}\n"
        f"üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞:</b> {team['captain_contact']}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {TEAM_STATUS.get(team['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {team['admin_comment'] or '–ù–µ—Ç'}\n\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–∏:</b>\n{players_list}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML",
        disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
    )

async def handle_team_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    discord_bot = context.bot_data.get("discord_bot")
    discord_server_id = context.bot_data.get("discord_server_id")
    discord_role_id = context.bot_data.get("discord_role_id")
    discord_captain_role_id = context.bot_data.get("discord_captain_role_id")
    
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    action, entity_type, entity_id = query.data.split("_")
    entity_id = int(entity_id)
    
    if entity_type == "team":
        if action == "approve":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã
            team = db.get_team_by_id(entity_id)
            old_status = team["status"] if team else None
            
            if db.update_team_status(entity_id, "approved"):
                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –≤—ã–¥–∞–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
                await process_team_roles(db, discord_bot, discord_server_id, discord_role_id, 
                                         discord_captain_role_id, entity_id, old_status, "approved")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
                await query.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
                await show_team_info(update, context, entity_id)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã.")
        
        elif action == "reject":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã
            team = db.get_team_by_id(entity_id)
            old_status = team["status"] if team else None
            
            if db.update_team_status(entity_id, "rejected"):
                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, —É–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ —É –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –æ–¥–æ–±—Ä–µ–Ω—ã —Ä–∞–Ω–µ–µ
                await process_team_roles(db, discord_bot, discord_server_id, discord_role_id, 
                                         discord_captain_role_id, entity_id, old_status, "rejected")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
                await query.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
                await show_team_info(update, context, entity_id)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã.")
        
        elif action == "comment":
            context.user_data["commenting_team"] = entity_id
            await query.message.reply_text(
                "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã:",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_comment")
                ]])
            )
            return ADMIN_COMMENTING
            
        elif action == "delete":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            await query.edit_message_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{entity_id}"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin_teams_team_{entity_id}")
                    ]
                ])
            )

async def confirm_delete_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    query = update.callback_query
    await query.answer()
    
    if "cancel_delete" in query.data:
        # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥
        await admin_teams_list(update, context)
        return
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–∞–Ω–¥—ã –∏–∑ callback_data
    team_id = int(query.data.split("_")[2])
    
    # –£–∑–Ω–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    teams = db.get_all_teams()
    team = next((t for t in teams if t["id"] == team_id), None)
    
    if team:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å Discord —Ä–æ–ª–∏
        if team['status'] == 'approved':
            discord_bot = context.bot_data.get("discord_bot")
            discord_server_id = context.bot_data.get("discord_server_id")
            discord_role_id = context.bot_data.get("discord_role_id")
            discord_captain_role_id = context.bot_data.get("discord_captain_role_id")
            
            from handlers.utils import process_team_roles
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω—è—Ç—å —Ä–æ–ª–∏
            try:
                roles_removed = await process_team_roles(
                    db, 
                    discord_bot, 
                    discord_server_id, 
                    discord_role_id, 
                    discord_captain_role_id, 
                    team_id, 
                    'approved', 
                    'draft'
                )
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ä–æ–ª–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                if not roles_removed:
                    await query.edit_message_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ä–æ–ª–∏ –≤ Discord. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_teams_list")
                        ]])
                    )
                    return
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–µ–π Discord: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–µ–π –≤ Discord. –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_teams_list")
                    ]])
                )
                return
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–µ–π
        if db.delete_team(team_id):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–º—É —Å–ø–∏—Å–∫—É –≤–µ—Ä–Ω—É—Ç—å—Å—è
            if team["status"] == "pending":
                callback_data = "admin_teams_pending"
            elif team["status"] == "approved":
                callback_data = "admin_teams_approved"
            elif team["status"] == "rejected":
                callback_data = "admin_teams_rejected"
            else:
                callback_data = "admin_teams_list"
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è
            await query.edit_message_text(
                "‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=callback_data)
                ]])
            )
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_teams_list")
                ]])
            )
    else:
        await query.edit_message_text(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_teams_list")
            ]])
        )

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    db = context.bot_data["db"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ callback –¥–ª—è –æ—Ç–º–µ–Ω—ã
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_comment":
            await query.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–∞–Ω–¥—ã –∏–∑ user_data
    team_id = context.user_data.get("commenting_team")
    if not team_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    
    comment = update.message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if db.update_team_status(team_id, status=None, comment=comment):
        await update.message.reply_text("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"admin_teams_team_{team_id}")
        ]])
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ:",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")
    
    # –û—á–∏—â–∞–µ–º user_data
    if "commenting_team" in context.user_data:
        del context.user_data["commenting_team"]
    
    return ConversationHandler.END

async def admin_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END
    
    await query.message.reply_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ @username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        ]])
    )
    return ADMIN_ADDING

async def process_add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∏–ª–∏ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    db = context.bot_data["db"]
    
    admin_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (ID –∏–ª–∏ @username)
    if admin_input.isdigit():
        # –≠—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID
        admin_id = int(admin_input)
        admin_username = None
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
            user = await context.bot.get_chat(admin_id)
            admin_username = user.username or user.first_name
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {admin_id}. –û—à–∏–±–∫–∞: {str(e)}"
            )
            return ConversationHandler.END
    
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ username-–æ–º
        username_match = re.match(USERNAME_PATTERN, admin_input)
        if username_match:
            username = username_match.group(1)
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ username
                user = await context.bot.get_chat(f"@{username}")
                admin_id = user.id
                admin_username = user.username or user.first_name
            except Exception as e:
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username @{username}. –û—à–∏–±–∫–∞: {str(e)}"
                )
                return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            return ADMIN_ADDING
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if db.is_admin(admin_id):
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_username} (ID: {admin_id}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if db.add_admin(admin_id, admin_username):
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_username} (ID: {admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    admin_keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
    ]])
    await update.message.reply_text(
        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=admin_keyboard
    )
    
    return ConversationHandler.END

async def admin_admins_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = db.get_all_admins()
    
    if not admins:
        await query.edit_message_text(
            "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    message = "üë• <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
    
    for idx, admin in enumerate(admins, 1):
        admin_name = admin["username"] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        admin_date = admin["added_date"]
        message += f"{idx}. {admin_name} (ID: {admin['telegram_id']})\n   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {admin_date}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]]),
        parse_mode="HTML"
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    stats = db.get_stats(7)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    all_teams = db.get_all_teams()
    pending_count = len([t for t in all_teams if t["status"] == "pending"])
    approved_count = len([t for t in all_teams if t["status"] == "approved"])
    rejected_count = len([t for t in all_teams if t["status"] == "rejected"])
    total_count = len(all_teams)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞</b>\n\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {total_count}\n"
    message += f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: {pending_count}\n"
    message += f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}\n"
    message += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    if stats:
        message += "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:</b>\n\n"
        
        for day in stats:
            message += f"<b>{day['day']}</b>\n"
            message += f"‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {day['registrations'] or 0}\n"
            message += f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {day['approved'] or 0}\n"
            message += f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {day['rejected'] or 0}\n\n"
    else:
        message += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]]),
        parse_mode="HTML"
    )

async def admin_select_tournament_for_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–±–æ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥ –∏–∑ callback_data
    command_parts = query.data.split("_")
    status = command_parts[3] if len(command_parts) > 3 else None
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    tournaments = db.get_all_tournaments()
    
    if not tournaments:
        await query.edit_message_text(
            "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    keyboard = []
    
    for tournament in tournaments:
        teams_count = len(db.get_all_teams(status=status, tournament_id=tournament['id']))
        keyboard.append([
            InlineKeyboardButton(
                f"{tournament['name']} ({teams_count} –∫–æ–º–∞–Ω–¥)",
                callback_data=f"admin_export_teams_{status}_{tournament['id']}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    all_teams_count = len(db.get_all_teams(status=status))
    keyboard.append([
        InlineKeyboardButton(
            f"–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã ({all_teams_count} –∫–æ–º–∞–Ω–¥)",
            callback_data=f"admin_export_teams_{status}_all"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    status_text = "–≤—Å–µ"
    if status == "pending":
        status_text = "–æ–∂–∏–¥–∞—é—â–∏–µ"
    elif status == "approved":
        status_text = "–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ"
    elif status == "rejected":
        status_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
    
    await query.edit_message_text(
        f"üì• <b>–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {status_text} –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def admin_export_teams(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ callback_data
    command_parts = query.data.split("_")
    status = command_parts[3] if len(command_parts) > 3 else None
    tournament_id = command_parts[4] if len(command_parts) > 4 and command_parts[4] != "all" else None
    
    if tournament_id:
        tournament_id = int(tournament_id)
        tournament = db.get_tournament_by_id(tournament_id)
        tournament_name = tournament['name'] if tournament else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä"
    else:
        tournament_name = "–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    teams = db.get_all_teams(status=status, tournament_id=tournament_id)
    
    if not teams:
        await query.answer("‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
        return await query.edit_message_text(
            f"–í —Ç—É—Ä–Ω–∏—Ä–µ \"{tournament_name}\" –Ω–µ—Ç {TEAM_STATUS.get(status, '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö')} –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_teams_{status}")
            ]])
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    status_text = "–í—Å–µ"
    if status == "pending":
        status_text = "–û–∂–∏–¥–∞—é—â–∏–µ"
    elif status == "approved":
        status_text = "–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ"
    elif status == "rejected":
        status_text = "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
    
    filename = f"{status_text}_–∫–æ–º–∞–Ω–¥—ã_{tournament_name}.txt"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    file_content = ""
    
    for team in teams:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        file_content += f"{team['team_name']}\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –∫–∞–ø–∏—Ç–∞–Ω, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        captain = None
        other_players = []
        
        for player in team["players"]:
            if player.get("is_captain", False):
                captain = player
            else:
                other_players.append(player)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
        player_index = 1
        
        if captain:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Discord –∫–∞–ø–∏—Ç–∞–Ω–∞
            discord_info = f" Discord: {captain.get('discord_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}" if captain.get('discord_username') else ""
            file_content += f"{player_index}) {captain['nickname']}{discord_info}\n"
            player_index += 1
        
        for player in other_players:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Discord –∏–≥—Ä–æ–∫–∞
            discord_info = f" Discord: {player.get('discord_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}" if player.get('discord_username') else ""
            file_content += f"{player_index}) {player['nickname']}{discord_info}\n"
            player_index += 1
        
        file_content += "\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    
    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(filename, "w", encoding="utf-8") as f:
        f.write(file_content)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.reply_document(
        document=open(filename, 'rb'),
        filename=filename,
        caption=f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã {status_text.lower()} –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_name}"
    )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.remove(filename)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞
    await query.edit_message_text(
        f"‚úÖ –§–∞–π–ª —Å {status_text.lower()} –∫–æ–º–∞–Ω–¥–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥", 
                                 callback_data=f"admin_tournament_teams_status_{tournament_id if tournament_id else 'all'}_{status}")
        ]])
    )

async def admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    db = context.bot_data["db"]
    all_teams = db.get_all_teams()
    pending_count = len([t for t in all_teams if t["status"] == "pending"])
    approved_count = len([t for t in all_teams if t["status"] == "approved"])
    rejected_count = len([t for t in all_teams if t["status"] == "rejected"])
    total_count = len(all_teams)
    
    keyboard = [
        [InlineKeyboardButton(f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ({total_count})", callback_data="admin_teams_list")],
        [
            InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ ({approved_count})", callback_data="admin_teams_approved"),
            InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ ({rejected_count})", callback_data="admin_teams_rejected")
        ],
        [InlineKeyboardButton(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ ({pending_count})", callback_data="admin_teams_pending")],
        [InlineKeyboardButton("üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏", callback_data="admin_tournaments")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_admins_list")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏

async def admin_tournaments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    tournaments = db.get_all_tournaments()
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    for tournament in tournaments:
        registration_status = "üîì" if tournament["registration_open"] else "üîí"
        team_count = tournament.get("team_count", 0)
        keyboard.append([
            InlineKeyboardButton(
                f"{registration_status} {tournament['name']} ({team_count} –∫–æ–º–∞–Ω–¥)", 
                callback_data=f"admin_tournament_{tournament['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    message = "<b>üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏</b>\n\n"
    
    if tournaments:
        message += "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤:\n\n"
        for idx, tournament in enumerate(tournaments, 1):
            status = "üîì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞" if tournament["registration_open"] else "üîí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞"
            team_count = tournament.get("team_count", 0)
            message += f"{idx}. <b>{tournament['name']}</b>\n"
            message += f"   –î–∞—Ç–∞: {tournament['event_date']}\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            message += f"   –ö–æ–º–∞–Ω–¥: {team_count}\n\n"
    else:
        message += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä!"
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
    return ADMIN_TOURNAMENT_MENU

async def admin_create_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞."""
    print("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è admin_create_tournament")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    await query.message.reply_text(
        "üèÜ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_tournaments")
        ]])
    )
    
    print(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ {ADMIN_CREATE_TOURNAMENT_NAME}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ADMIN_CREATE_TOURNAMENT_NAME

async def admin_process_tournament_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    print(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è admin_process_tournament_name —Å —Ç–µ–∫—Å—Ç–æ–º: {update.message.text}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    tournament_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(tournament_name) < 2 or len(tournament_name) > 100:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_CREATE_TOURNAMENT_NAME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_name}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data["new_tournament_name"] = tournament_name
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await update.message.reply_text(
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞: <b>{tournament_name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_tournaments")
        ]])
    )
    
    print(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é {ADMIN_CREATE_TOURNAMENT_DESCRIPTION}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ADMIN_CREATE_TOURNAMENT_DESCRIPTION

async def admin_process_tournament_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    tournament_description = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
    if len(tournament_description) < 10:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_CREATE_TOURNAMENT_DESCRIPTION
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["new_tournament_description"] = tournament_description
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    await update.message.reply_text(
        f"üèÜ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:</b> {context.user_data['new_tournament_name']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {tournament_description[:100]}...\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_tournaments")
        ]])
    )
    
    return ADMIN_CREATE_TOURNAMENT_DATE

async def admin_process_tournament_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä."""
    tournament_date = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
    if not re.match(date_pattern, tournament_date):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_CREATE_TOURNAMENT_DATE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["new_tournament_date"] = tournament_date
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    tournament_name = context.user_data["new_tournament_name"]
    tournament_description = context.user_data["new_tournament_description"]
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = context.bot_data["db"]
    try:
        tournament_id = db.create_tournament(
            name=tournament_name,
            description=tournament_description,
            event_date=tournament_date
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        await update.message.reply_text(
            f"‚úÖ <b>–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tournament_name}\n"
            f"<b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {tournament_date}\n"
            f"<b>–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> –û—Ç–∫—Ä—ã—Ç–∞\n\n"
            f"–¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="admin_tournaments")
            ]])
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if "new_tournament_name" in context.user_data:
            del context.user_data["new_tournament_name"]
        if "new_tournament_description" in context.user_data:
            del context.user_data["new_tournament_description"]
        if "new_tournament_date" in context.user_data:
            del context.user_data["new_tournament_date"]
            
        return ADMIN_TOURNAMENT_MENU
        
    except ValueError as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—É—Ä–Ω–∏—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:</b> {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_create_tournament"),
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU

async def admin_show_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[2])
    context.user_data["current_tournament_id"] = tournament_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    tournament = db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await query.edit_message_text(
            "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    teams = db.get_all_teams()
    tournament_teams = [t for t in teams if t.get("tournament_id") == tournament_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—É—Ä–Ω–∏—Ä–µ
    message = (
        f"üèÜ <b>{tournament['name']}</b>\n\n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{tournament['description']}\n\n"
        f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {tournament['event_date']}\n"
        f"üîê <b>–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {'–û—Ç–∫—Ä—ã—Ç–∞' if tournament['registration_open'] else '–ó–∞–∫—Ä—ã—Ç–∞'}\n"
        f"üìä <b>–ö–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> {len(tournament_teams)}\n\n"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_edit_tournament_name_{tournament_id}"),
        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_edit_tournament_desc_{tournament_id}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"admin_edit_tournament_date_{tournament_id}")
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if tournament['registration_open']:
        keyboard.append([InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"admin_close_tournament_{tournament_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üîì –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"admin_open_tournament_{tournament_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"admin_delete_tournament_{tournament_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–º–∞–Ω–¥
    keyboard.append([InlineKeyboardButton(f"üë• –ö–æ–º–∞–Ω–¥—ã ({len(tournament_teams)})", callback_data=f"admin_tournament_teams_{tournament_id}")])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
    return ADMIN_TOURNAMENT_MENU

async def admin_close_tournament_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ç—É—Ä–Ω–∏—Ä."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[3])
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    success = db.close_tournament_registration(tournament_id)
    
    if success:
        await query.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
        return await admin_show_tournament(update, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ADMIN_TOURNAMENT_MENU

async def admin_open_tournament_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ç—É—Ä–Ω–∏—Ä."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[3])
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    success = db.update_tournament(tournament_id, registration_open=True)
    
    if success:
        await query.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –æ—Ç–∫—Ä—ã—Ç–∞!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
        return await admin_show_tournament(update, context)
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ADMIN_TOURNAMENT_MENU

async def admin_edit_tournament_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[4])
    context.user_data["editing_tournament_id"] = tournament_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    db = context.bot_data["db"]
    tournament = db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await query.edit_message_text(
            "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    await query.message.reply_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{tournament['name']}</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{tournament_id}")
        ]])
    )
    
    return ADMIN_EDIT_TOURNAMENT_NAME

async def admin_process_edit_tournament_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    new_name = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(new_name) < 2 or len(new_name) > 100:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{context.user_data['editing_tournament_id']}")
            ]])
        )
        return ADMIN_EDIT_TOURNAMENT_NAME
    
    tournament_id = context.user_data.get("editing_tournament_id")
    db = context.bot_data["db"]
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        success = db.update_tournament(tournament_id, name=new_name)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
            ]])
            
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{new_name}</b>!",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –û—á–∏—â–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if "editing_tournament_id" in context.user_data:
                del context.user_data["editing_tournament_id"]
            
            return ADMIN_TOURNAMENT_MENU
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
                ]])
            )
            return ADMIN_TOURNAMENT_MENU
            
    except ValueError as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—É—Ä–Ω–∏—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:</b> {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU

async def admin_edit_tournament_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[4])
    context.user_data["editing_tournament_id"] = tournament_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    db = context.bot_data["db"]
    tournament = db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await query.edit_message_text(
            "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    await query.message.reply_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{tournament['description']}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{tournament_id}")
        ]])
    )
    
    return ADMIN_EDIT_TOURNAMENT_DESCRIPTION

async def admin_process_edit_tournament_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    new_description = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
    if len(new_description) < 10:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{context.user_data['editing_tournament_id']}")
            ]])
        )
        return ADMIN_EDIT_TOURNAMENT_DESCRIPTION
    
    tournament_id = context.user_data.get("editing_tournament_id")
    db = context.bot_data["db"]
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        success = db.update_tournament(tournament_id, description=new_description)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
            ]])
            
            await update.message.reply_text(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –û—á–∏—â–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if "editing_tournament_id" in context.user_data:
                del context.user_data["editing_tournament_id"]
            
            return ADMIN_TOURNAMENT_MENU
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
                ]])
            )
            return ADMIN_TOURNAMENT_MENU
            
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:</b> {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU

async def admin_edit_tournament_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[4])
    context.user_data["editing_tournament_id"] = tournament_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    db = context.bot_data["db"]
    tournament = db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await query.edit_message_text(
            "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–π –¥–∞—Ç—ã
    await query.message.reply_text(
        f"üìÖ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: <b>{tournament['event_date']}</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{tournament_id}")
        ]])
    )
    
    return ADMIN_EDIT_TOURNAMENT_DATE

async def admin_process_edit_tournament_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    new_date = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
    if not re.match(date_pattern, new_date):
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{context.user_data['editing_tournament_id']}")
            ]])
        )
        return ADMIN_EDIT_TOURNAMENT_DATE
    
    tournament_id = context.user_data.get("editing_tournament_id")
    db = context.bot_data["db"]
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        success = db.update_tournament(tournament_id, event_date=new_date)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
            ]])
            
            await update.message.reply_text(
                f"‚úÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_date}</b>!",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –û—á–∏—â–∞–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if "editing_tournament_id" in context.user_data:
                del context.user_data["editing_tournament_id"]
            
            return ADMIN_TOURNAMENT_MENU
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
                ]])
            )
            return ADMIN_TOURNAMENT_MENU
            
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await update.message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:</b> {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU

async def admin_delete_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    tournament = db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await query.edit_message_text(
            "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await query.edit_message_text(
        f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{tournament['name']}</b>\n"
        f"–î–∞—Ç–∞: {tournament['event_date']}\n\n"
        f"‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ–≥–æ!\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_tournament_{tournament_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"admin_tournament_{tournament_id}")
            ]
        ])
    )
    
    return ADMIN_TOURNAMENT_MENU

async def admin_confirm_delete_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[4])
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    success = db.delete_tournament(tournament_id)
    
    if success:
        await query.edit_message_text(
            "‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU

async def admin_tournament_teams(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç—É—Ä–Ω–∏—Ä."""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data["db"]
    if not db.is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ADMIN_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ callback_data
    tournament_id = int(query.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    tournament = db.get_tournament_by_id(tournament_id)
    
    if not tournament:
        await query.edit_message_text(
            "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tournaments")
            ]])
        )
        return ADMIN_TOURNAMENT_MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç—É—Ä–Ω–∏—Ä
    teams = db.get_all_teams()
    tournament_teams = [t for t in teams if t.get("tournament_id") == tournament_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
    message = f"üë• <b>–ö–æ–º–∞–Ω–¥—ã, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä:</b> {tournament['name']}\n\n"
    
    if tournament_teams:
        for idx, team in enumerate(tournament_teams, 1):
            status_emoji = "‚è≥" if team["status"] == "pending" else "‚úÖ" if team["status"] == "approved" else "‚ùå"
            message += f"{idx}. {status_emoji} <b>{team['team_name']}</b>\n"
            message += f"   –°—Ç–∞—Ç—É—Å: {TEAM_STATUS.get(team['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–Ω–µ
            captain = next((p for p in team["players"] if p.get("is_captain", False)), None)
            if captain:
                discord_info = f" Discord: {captain.get('discord_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}" if captain.get('discord_username') else ""
                message += f"   –ö–∞–ø–∏—Ç–∞–Ω: {captain['nickname']} (@{captain['telegram_username']}){discord_info}\n"
            
            message += f"   –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {team['registration_date']}\n\n"
    else:
        message += "–ù–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    for team in tournament_teams:
        status_emoji = "‚è≥" if team["status"] == "pending" else "‚úÖ" if team["status"] == "approved" else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(
                f"{status_emoji} {team['team_name']}",
                callback_data=f"admin_teams_team_{team['id']}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"admin_tournament_{tournament_id}")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
    return ADMIN_TOURNAMENT_MENU

def register_admin_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(admin_teams_list, pattern="^admin_teams_"))
    application.add_handler(CallbackQueryHandler(admin_tournament_status_teams, pattern="^admin_tournament_teams_status_"))
    application.add_handler(CallbackQueryHandler(admin_export_teams, pattern="^admin_export_teams_"))
    application.add_handler(CallbackQueryHandler(admin_add_admin, pattern="^admin_add_admin$"))
    application.add_handler(CallbackQueryHandler(admin_admins_list, pattern="^admin_admins_list$"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(admin_back, pattern="^admin_back$"))
    application.add_handler(CallbackQueryHandler(handle_team_action, pattern="^(approve|reject|comment|delete)_team_"))
    application.add_handler(CallbackQueryHandler(confirm_delete_team, pattern="^confirm_delete_"))
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    application.add_handler(CallbackQueryHandler(admin_tournaments, pattern="^admin_tournaments$"))
    application.add_handler(CallbackQueryHandler(admin_show_tournament, pattern="^admin_tournament_\\d+$"))
    application.add_handler(CallbackQueryHandler(admin_tournament_teams, pattern="^admin_tournament_teams_\\d+$"))
    application.add_handler(CallbackQueryHandler(admin_close_tournament_registration, pattern="^admin_close_tournament_\\d+$"))
    application.add_handler(CallbackQueryHandler(admin_open_tournament_registration, pattern="^admin_open_tournament_\\d+$"))
    application.add_handler(CallbackQueryHandler(admin_delete_tournament, pattern="^admin_delete_tournament_\\d+$"))
    application.add_handler(CallbackQueryHandler(admin_confirm_delete_tournament, pattern="^admin_confirm_delete_tournament_\\d+$"))

    # ConversationHandler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    create_tournament_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_create_tournament, pattern="^admin_create_tournament$")],
        states={
            ADMIN_CREATE_TOURNAMENT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_tournament_name)
            ],
            ADMIN_CREATE_TOURNAMENT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_tournament_description)
            ],
            ADMIN_CREATE_TOURNAMENT_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_tournament_date)
            ],
        },
        fallbacks=[CallbackQueryHandler(admin_tournaments, pattern="^admin_tournaments$")],
        map_to_parent={
            ADMIN_TOURNAMENT_MENU: ADMIN_TOURNAMENT_MENU
        }
    )
    application.add_handler(create_tournament_handler)

    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω)
    edit_tournament_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(admin_edit_tournament_name, pattern="^admin_edit_tournament_name_\\d+$"),
            CallbackQueryHandler(admin_edit_tournament_description, pattern="^admin_edit_tournament_desc_\\d+$"),
            CallbackQueryHandler(admin_edit_tournament_date, pattern="^admin_edit_tournament_date_\\d+$")
        ],
        states={
            ADMIN_EDIT_TOURNAMENT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_edit_tournament_name)
            ],
            ADMIN_EDIT_TOURNAMENT_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_edit_tournament_description)
            ],
            ADMIN_EDIT_TOURNAMENT_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, admin_process_edit_tournament_date)
            ],
        },
        fallbacks=[
            CallbackQueryHandler(admin_show_tournament, pattern="^admin_tournament_\\d+$")
        ],
        map_to_parent={
            ADMIN_TOURNAMENT_MENU: ADMIN_TOURNAMENT_MENU
        }
    )
    application.add_handler(edit_tournament_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
    comment_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_team_action, pattern="^comment_team_")],
        states={
            ADMIN_COMMENTING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_comment),
                CallbackQueryHandler(handle_admin_comment, pattern="^cancel_comment$")
            ],
        },
        fallbacks=[CommandHandler("admin", admin_command)],
        per_message=True
    )
    application.add_handler(comment_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
    add_admin_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_add_admin, pattern="^admin_add_admin$")],
        states={
            ADMIN_ADDING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_add_admin),
                CallbackQueryHandler(admin_back, pattern="^admin_back$")
            ],
        },
        fallbacks=[CommandHandler("admin", admin_command)],
        per_message=True
    )
    application.add_handler(add_admin_handler)