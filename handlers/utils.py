import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, Application
)

from constants import *

logger = logging.getLogger(__name__)

async def check_registration_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å user_id (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ callback_query)
    if update.callback_query:
        user_id = update.callback_query.from_user.id
    else:
        user_id = update.message.from_user.id
    
    db = context.bot_data["db"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_keyboard = [
        [KeyboardButton("üë§ –ú–æ—è –∫–æ–º–∞–Ω–¥–∞")],
        [KeyboardButton("üéÆ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")],
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    check_markup = ReplyKeyboardMarkup(check_keyboard, resize_keyboard=True)
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            "‚Ä¢ <b>–ú–æ—è –∫–æ–º–∞–Ω–¥–∞</b> - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã\n"
            "‚Ä¢ <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b> - –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            reply_markup=check_markup,
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            "‚Ä¢ <b>–ú–æ—è –∫–æ–º–∞–Ω–¥–∞</b> - —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã\n"
            "‚Ä¢ <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b> - –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            reply_markup=check_markup,
            parse_mode="HTML"
        )
    
    return STATUS_INPUT

async def show_my_team(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å user_id –∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        user_id = update.callback_query.from_user.id
        reply_func = update.callback_query.message.reply_text
        await update.callback_query.answer()
    else:
        user_id = update.message.from_user.id
        reply_func = update.message.reply_text
    
    db = context.bot_data["db"]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID
    team = db.get_team_by_telegram_id(user_id)
    
    if team:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
        message = await format_team_info(team, is_my_team=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω–æ–º
        is_captain = any(p.get("is_captain", False) and p.get("telegram_id") == user_id for p in team["players"])
        
        if is_captain and team["status"] == "pending":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–ø–∏—Ç–∞–Ω –∏ –∑–∞—è–≤–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
            keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")])
        
        keyboard.append([KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await reply_func(message, reply_markup=reply_markup, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        context.user_data["current_team_id"] = team["id"]
        
        return STATUS_TEAM_ACTION
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        message = (
            "‚ö†Ô∏è <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º."
        )
        
        back_keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        
        await reply_func(message, reply_markup=back_keyboard, parse_mode="HTML")
        return STATUS_INPUT

async def prompt_team_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_back_keyboard()
    )
    return STATUS_SEARCH_TEAM

async def search_team_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    team_name = update.message.text.strip()
    db = context.bot_data["db"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(team_name) < 3:
        await update.message.reply_text(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_back_keyboard()
        )
        return STATUS_SEARCH_TEAM
    
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    team = db.get_team_by_name(team_name)
    
    if team:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ (–ø—É–±–ª–∏—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        message = await format_team_info(team, is_my_team=False)
        
        back_keyboard = ReplyKeyboardMarkup([[KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
        
        await update.message.reply_text(message, reply_markup=back_keyboard, parse_mode="HTML")
        return STATUS_INPUT
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await update.message.reply_text(
            f"‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º \"{team_name}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            reply_markup=get_back_keyboard()
        )
        return STATUS_SEARCH_TEAM

async def format_team_info(team, is_my_team=False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        team: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–∞–Ω–¥–µ
        is_my_team: True, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ HTML
    """
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    status_text = TEAM_STATUS.get(team["status"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    captain = None
    for player in team["players"]:
        if player.get("is_captain", False):
            captain = player
            break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –Ω–∞—á–∏–Ω–∞—è —Å –∫–∞–ø–∏—Ç–∞–Ω–∞
    all_players = []
    if captain:
        all_players.append(captain)  # –ö–∞–ø–∏—Ç–∞–Ω –ø–µ—Ä–≤—ã–º
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    for player in team["players"]:
        if not player.get("is_captain", False):
            all_players.append(player)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    players_list = ""
    for idx, player in enumerate(all_players, 1):
        players_list += f"{idx}. {player['nickname']} (@{player['telegram_username']})"
        if player.get('discord_username'):
            players_list += f" Discord: {player['discord_username']}"
        players_list += "\n"
    
    # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        "üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ:</b>\n\n"
        f"üéÆ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b> {team['team_name']}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {team['registration_date']}\n"
        f"üìä <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
    if team.get("tournaments"):
        message += "\nüèÜ <b>–£—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö:</b>\n"
        for tournament in team["tournaments"]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚è≥" if tournament["registration_status"] == "pending" else "‚úÖ" if tournament["registration_status"] == "approved" else "‚ùå"
            tournament_status = TEAM_STATUS.get(tournament["registration_status"], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            message += (
                f"\n‚Ä¢ {status_emoji} <b>{tournament['name']}</b>\n"
                f"  üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {tournament['event_date']}\n"
                f"  üìä –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {tournament_status}\n"
            )
    elif team["status"] == "draft":
        message += "\nüìù <i>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∏ –Ω–∞ –æ–¥–∏–Ω —Ç—É—Ä–Ω–∏—Ä</i>\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
    if is_my_team:
        message += f"\nüì± <b>–ö–æ–Ω—Ç–∞–∫—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞:</b> {team['captain_contact']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–Ω–µ
    if captain:
        message += f"üë®‚Äç‚úàÔ∏è <b>–ö–∞–ø–∏—Ç–∞–Ω:</b> {captain['nickname']} (@{captain['telegram_username']})\n"
        if captain.get('discord_username'):
            message += f"üéÆ <b>Discord –∫–∞–ø–∏—Ç–∞–Ω–∞:</b> {captain['discord_username']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if team.get("admin_comment"):
        message += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n{team['admin_comment']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    message += f"\n<b>–ò–≥—Ä–æ–∫–∏:</b>\n{players_list}"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Ç—É—Ä–Ω–∏—Ä–æ–≤
    if is_my_team:
        if all(t["registration_status"] == "approved" for t in team.get("tournaments", [])):
            message += (
                "\n‚úÖ <b>–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã –æ–¥–æ–±—Ä–µ–Ω—ã!</b>\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤."
            )
        elif any(t["registration_status"] == "pending" for t in team.get("tournaments", [])):
            message += (
                "\n‚è≥ <b>–ï—Å—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.</b>\n"
                "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è."
            )
        elif team["status"] == "draft":
            message += (
                "\nüìù <b>–ö–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç–∞–¥–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è.</b>\n"
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É."
            )
    
    return message

async def handle_team_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    action = update.message.text.strip()
    
    if action == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_keyboard = [
            [KeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å")],
            [KeyboardButton("‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å")]
        ]
        confirm_markup = ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã?</b>\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=confirm_markup,
            parse_mode="HTML"
        )
        return STATUS_CONFIRM_CANCEL
    elif action == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        return await check_registration_status(update, context)
    else:
        return await check_registration_status(update, context)

async def confirm_cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã."""
    choice = update.message.text.strip()
    
    if choice == "‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å":
        team_id = context.user_data.get("current_team_id")
        if not team_id:
            # –ï—Å–ª–∏ ID –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = context.bot_data["db"]
        if db.delete_team(team_id):
            await update.message.reply_text(
                "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
                reply_markup=get_main_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if "current_team_id" in context.user_data:
                del context.user_data["current_team_id"]
                
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
        return await show_my_team(update, context)

async def back_to_status_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    return await check_registration_status(update, context)

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END

def get_back_keyboard():
    """–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
    keyboard = [
        [KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."""
    keyboard = [
        [KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ")],
        [KeyboardButton("‚ùì FAQ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def back_to_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å."""
    from handlers.profile import profile_menu
    return await profile_menu(update, context)

def register_status_handlers(application: Application) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞."""
    
    status_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏$"), check_registration_status)],
        states={
            STATUS_INPUT: [
                MessageHandler(filters.Regex("^üë§ –ú–æ—è –∫–æ–º–∞–Ω–¥–∞$"), show_my_team),
                MessageHandler(filters.Regex("^üéÆ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é$"), prompt_team_name),
                MessageHandler(filters.Regex("^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), back_to_main),
            ],
            STATUS_TEAM_ACTION: [
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é$|^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), handle_team_action),
            ],
            STATUS_CONFIRM_CANCEL: [
                MessageHandler(filters.Regex("^‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å$|^‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å$"), confirm_cancel_registration),
            ],
            STATUS_SEARCH_TEAM: [
                MessageHandler(filters.Regex("^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), back_to_status_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, search_team_by_name),
            ],
        },
        fallbacks=[CommandHandler("start", back_to_main)],
    )
    
    application.add_handler(status_handler)
